{"ast":null,"code":"var _jsxFileName = \"/Users/kristian/Desktop/codebase/my-task-list/task-app/src/components/TodoItem.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getStyle = () => {\n      return {\n        background: '#404040',\n        padding: '10px',\n        borderBottom: '1px #ccc dotted',\n        textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n      };\n    };\n  }\n\n  render() {\n    // const { id, title } = this.props.todo;\n    return React.createElement(\"div\", {\n      style: this.getStyle(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      onChange: this.props.markComplete.bind(this, id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }), \" \", ' ', title));\n  }\n\n} // PropTypes\n\n\nTodoItem.propTypes = {\n  todo: PropTypes.object.isRequired\n};\nexport default TodoItem; // for using custom methods such as our markComplete method:\n// you can either use -> onChange={this.markComplete.bind(this)} to get access to props\n// or you can write your method like this -> markComplete = (e) => { }","map":{"version":3,"sources":["/Users/kristian/Desktop/codebase/my-task-list/task-app/src/components/TodoItem.js"],"names":["React","PropTypes","TodoItem","Component","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","render","markComplete","bind","id","title","propTypes","object","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAGA,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAuC;AAAA;AAAA;;AAAA,SAEnCC,QAFmC,GAExB,MAAM;AACb,aAAO;AACHC,QAAAA,UAAU,EAAE,SADT;AAEHC,QAAAA,OAAO,EAAE,MAFN;AAGHC,QAAAA,YAAY,EAAE,iBAHX;AAIHC,QAAAA,cAAc,EAAE,KAAKC,KAAL,CAAWC,IAAX,CAAgBC,SAAhB,GAA4B,cAA5B,GAA6C;AAJ1D,OAAP;AAMH,KATkC;AAAA;;AAWnCC,EAAAA,MAAM,GAAG;AACL;AACA,WACI;AAAK,MAAA,KAAK,EAAE,KAAKR,QAAL,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,QAAQ,EAAE,KAAKK,KAAL,CAAWI,YAAX,CAAwBC,IAAxB,CAA6B,IAA7B,EAAmCC,EAAnC,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,OACiF,GADjF,EAEMC,KAFN,CADJ,CADJ;AAOF;;AApBiC,C,CAuBvC;;;AACAd,QAAQ,CAACe,SAAT,GAAqB;AACjBP,EAAAA,IAAI,EAAET,SAAS,CAACiB,MAAV,CAAiBC;AADN,CAArB;AAIA,eAAejB,QAAf,C,CAGA;AACA;AACA","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nclass TodoItem extends React.Component {\n\n    getStyle = () => {\n        return {\n            background: '#404040',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n        }\n    }\n\n    render() {\n        // const { id, title } = this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {' '}\n                    { title }\n                </p>\n            </div>\n    )};\n}\n\n// PropTypes\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\nexport default TodoItem;\n\n\n// for using custom methods such as our markComplete method:\n// you can either use -> onChange={this.markComplete.bind(this)} to get access to props\n// or you can write your method like this -> markComplete = (e) => { }\n"]},"metadata":{},"sourceType":"module"}